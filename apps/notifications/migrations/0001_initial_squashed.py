# Generated by Django 3.0.9 on 2020-08-21 02:41
import uuid

import django.contrib.postgres.fields.jsonb
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import django_fsm
import model_utils.fields


def create_notification_groups(apps, schema_editor):
    """Create all notification groups and types."""
    NotificationGroup = apps.get_model('notifications', 'NotificationGroup')

    attorney_follow_group = NotificationGroup(title='Attorneys I Follow')
    matter_group = NotificationGroup(title='Matter')
    NotificationGroup.objects.bulk_create((attorney_follow_group, matter_group))

    create_notification_types(
        apps, schema_editor, attorney_follow_group, matter_group
    )


def create_notification_types(
    apps, schema_editor, attorney_follow_group, matter_group
):
    """Create notification types."""
    NotificationType = apps.get_model('notifications', 'NotificationType')

    # Notification types fields data
    notification_types_data = (
        # `client` notification types only
        dict(
            title='New Event',
            runtime_tag='new_attorney_event',
            group=attorney_follow_group,
            is_for_client=True
        ),
        dict(
            title='Forum Activity',
            runtime_tag='new_attorney_post',
            group=attorney_follow_group,
            is_for_client=True
        ),
        dict(
            title='Status Update',
            runtime_tag='matter_status_update',
            group=matter_group,
            is_for_client=True
        ),
        dict(
            title='File Shared',
            runtime_tag='document_shared_by_attorney',
            group=matter_group,
            is_for_client=True
        ),

        # `attorney` notification types only
        dict(
            title='New Opportunities',
            runtime_tag='new_opportunities',
            is_for_attorney=True
        ),
        dict(
            title='New Network',
            runtime_tag='new_group_chat',
            is_for_attorney=True
        ),

        # `client` and `attorney` notification types only
        dict(
            title='New Message',
            runtime_tag='new_message',
            group=matter_group,
            is_for_client=True,
            is_for_attorney=True
        ),
        dict(
            title='New Chat',
            runtime_tag='new_chat',
            is_for_client=True,
            is_for_attorney=True
        ),
        dict(
            title='New Video Call',
            runtime_tag='new_video_call',
            group=matter_group,
            is_for_client=True,
            is_for_attorney=True
        ),
        dict(
            title='Topics I Follow Activity',
            runtime_tag='new_post',
            is_for_client=True,
            is_for_attorney=True
        ),

        # `support` and `attorney` notification types only
        dict(
            title='New Matter Shared',
            runtime_tag='new_matter_shared',
            group=matter_group,
            is_for_support=True,
            is_for_attorney=True
        ),

    )
    NotificationType.objects.bulk_create(
        NotificationType(**notification_type_data)
        for notification_type_data in notification_types_data
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Notification group title which will be displayed for the users', max_length=100, verbose_name='Title')),
            ],
            options={
                'verbose_name': 'Notification group',
                'verbose_name_plural': 'Notification groups',
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('runtime_tag', models.CharField(editable=False, help_text='Code related name of notification type', max_length=50, unique=True, verbose_name='Runtime tag')),
                ('title', models.CharField(help_text='Human-readable name of a type', max_length=100, verbose_name='Title')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='types', to='notifications.NotificationGroup', verbose_name='Notification group')),
                ('is_for_attorney', models.BooleanField(default=False, help_text='Is notification type available for attorney', verbose_name='Is for attorney')),
                ('is_for_client', models.BooleanField(default=False, help_text='Is notification type available for client', verbose_name='Is for client')),
                ('is_for_support', models.BooleanField(default=False, help_text='Is notification type available for support', verbose_name='Is for support')),
            ],
            options={
                'verbose_name': 'Notification type',
                'verbose_name_plural': 'Notification types',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Title of notification', max_length=255, verbose_name='Title')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to='notifications.NotificationType', verbose_name='Notification type')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('extra_payload', django.contrib.postgres.fields.jsonb.JSONField(default=dict, verbose_name='Extra notification payload')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='NotificationDispatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('notification', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='notification_dispatches', to='notifications.Notification', verbose_name='Notification')),
                ('recipient', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='notification_dispatches', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
                ('status', django_fsm.FSMField(choices=[('prepared', 'Prepared'), ('sent', 'Sent'), ('read', 'Read')], default='prepared', help_text='Notification status for recipient: prepared, sent, read', max_length=50, verbose_name='Status of notification')),
            ],
            options={
                'verbose_name': 'Notification dispatch',
                'verbose_name_plural': 'Notification dispatches',
            },
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('by_email', models.BooleanField(default=True, help_text='Notify user by email', verbose_name='Notify by email')),
                ('by_push', models.BooleanField(default=True, help_text='Notify user by push notification', verbose_name='Notify by push notification')),
                ('notification_type', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='notifications.NotificationType', verbose_name='Notification type')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_settings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification setting',
                'verbose_name_plural': 'Notification settings',
                'unique_together': {('user', 'notification_type')},
            },
        ),
        migrations.RunPython(
            code=create_notification_groups,
            elidable=False
        ),
    ]
