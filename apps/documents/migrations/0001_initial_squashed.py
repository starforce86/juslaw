# Generated by Django 3.0.9 on 2020-08-21 02:33
import django.contrib.postgres.fields
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import model_utils.fields

import apps.documents.models.resources


def create_admin_template_folder(apps, schema_editor):
    """Create template folder for admins."""
    Folder = apps.get_model('documents', 'Folder')
    Folder.objects.create(
        title='Templates',
        is_template=True,
        owner=None,
        matter=None,
        parent=None,
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('business', '0001_initial_squashed'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Title of resource', max_length=255, verbose_name='Title')),
                ('path', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, help_text='Materialized path of folder hierarchy', size=None, verbose_name='Path')),
                ('is_shared', models.BooleanField(default=False, help_text='Is folder shared between attorney and client', verbose_name='Is shared')),
                ('matter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='folders', related_query_name='documents_folders', to='business.Matter', verbose_name='Matter')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='folders', related_query_name='documents_folders', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='folders', related_query_name='documents_folders', to='documents.Folder', verbose_name='Parent')),
                ('is_template', models.BooleanField(default=False, help_text='Is a template', verbose_name='Is a template')),
            ],
            options={
                'verbose_name': 'Folder',
                'verbose_name_plural': 'Folders',
                'abstract': False,
                'unique_together': {('parent', 'title', 'owner', 'matter')},
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Title of resource', max_length=255, verbose_name='Title')),
                ('mime_type', models.CharField(help_text='Mime type of file', max_length=255, verbose_name='Mime type')),
                ('file', models.FileField(help_text="Document's file", max_length=255, upload_to=apps.documents.models.resources.upload_documents_to, verbose_name='File')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_documents', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('matter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='documents', related_query_name='documents_documents', to='business.Matter', verbose_name='Matter')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='documents', related_query_name='documents_documents', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', related_query_name='documents_documents', to='documents.Folder', verbose_name='Parent')),
                ('is_template', models.BooleanField(default=False, help_text='Is a template', verbose_name='Is a template')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'abstract': False,
                'unique_together': {('parent', 'title', 'owner', 'matter')},
            },
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(matter__isnull=True), fields=('title', 'parent'), name='unique private root document'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(parent__isnull=True), fields=('title', 'matter'), name='unique matter root document'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.UniqueConstraint(condition=models.Q(('matter__isnull', True), ('parent__isnull', True)), fields=('title', 'owner'), name='unique root document'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(matter__isnull=True), fields=('title', 'parent'), name='unique private root folder'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(parent__isnull=True), fields=('title', 'matter'), name='unique matter root folder'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(('matter__isnull', True), ('parent__isnull', True)), fields=('title', 'owner'), name='unique root folder'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(('is_shared', True), ('matter__isnull', False)), fields=('matter', 'is_shared'), name='unique shared folder for matter'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, pk=django.db.models.expressions.F('parent')), name='parent can become parent to itself'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_shared', True), ('matter__isnull', False)), ('is_shared', False), _connector='OR'), name='shared folder must have matter'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(('is_template', True), ('owner__isnull', True), ('parent__isnull', True)), fields=('is_template',), name='unique root template folder'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(('is_template', True), ('parent__isnull', True)), fields=('is_template', 'owner'), name='unique root personal template folder'),
        ),
        migrations.RunPython(
            code=create_admin_template_folder,
            elidable=False
        ),
    ]
